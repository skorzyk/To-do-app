{"version":3,"sources":["components/AddTask.js","components/Task.js","components/TaskList.js","components/App.js","serviceWorker.js","index.js"],"names":["AddTask","state","text","checked","date","Date","toISOString","slice","handleText","e","_this","setState","target","value","handleCheckbox","handleDate","handleClick","_this$state","length","props","add","minDate","maxDate","react_default","a","createElement","className","type","placeholder","this","onChange","id","htmlFor","min","max","onClick","Component","Task","_props$task","task","active","important","finishDate","style","color","change","delete","finish","toLocaleString","TaskList","tasks","filter","done","sort","b","toLowerCase","activeTasks","map","components_Task","key","doneTasks","Fragment","fontSize","App","counter","deleteTask","Object","toConsumableArray","changeTaskStatus","forEach","getTime","addTask","prevState","concat","src_components_AddTask","components_TaskList","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.85cf19ae.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport './AddTask.css'\r\nclass AddTask extends Component {\r\n    state = {\r\n        text: \"\",\r\n        checked: false,\r\n        date: new Date().toISOString().slice(0, 10)\r\n    }\r\n\r\n    handleText = (e) => {\r\n        this.setState({\r\n            text: e.target.value\r\n        })\r\n    }\r\n\r\n    handleCheckbox = (e) => {\r\n        this.setState({\r\n            checked: e.target.checked\r\n        })\r\n    }\r\n\r\n    handleDate = (e) => {\r\n        this.setState({\r\n            date: e.target.value\r\n        })\r\n    }\r\n\r\n    handleClick = () => {\r\n\r\n        const { text, checked, date } = this.state\r\n        if (text.length) {\r\n            const add = this.props.add(text, date, checked) // metoda z App.js \r\n            if (add === true) {\r\n                this.setState({\r\n                    text: \"\",\r\n                    checked: false,\r\n                    date: new Date().toISOString().slice(0, 10)\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const minDate = new Date().toISOString().slice(0, 10)\r\n        let maxDate = minDate.slice(0, 4) * 1 + 1\r\n        maxDate = maxDate + \"-12-31\"\r\n\r\n        return (\r\n            <div className=\"form\">\r\n                <input type=\"text\" placeholder=\"Dodaj zadanie\" value={this.state.text} onChange={this.handleText} />\r\n                <input type=\"checkbox\" checked={this.state.checked} id=\"important\" onChange={this.handleCheckbox} />\r\n                <label htmlFor=\"important\">Priorytet</label>\r\n                <br />\r\n                <label htmlFor=\"date\">Do kiedy zrobić </label>\r\n                <input type=\"date\" value={this.state.date} min={minDate} max={maxDate} onChange={this.handleDate} />\r\n                <br />\r\n                <button onClick={this.handleClick}>Dodaj</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddTask;","import React from 'react';\r\n\r\n\r\nconst Task = (props) => {\r\n    const style = {\r\n        color: 'red'\r\n    }\r\n    const { text, date, id, active, important, finishDate } = props.task\r\n    if (active === true) {\r\n\r\n\r\n        return (\r\n            <div>\r\n                <p>\r\n                    <strong style={important ? style : null}>{text}</strong> do - <span>{date} </span>\r\n                    <button onClick={() => props.change(id)}>Zrobione </button>\r\n                    <button onClick={() => props.delete(id)}>X </button>\r\n                </p>\r\n\r\n\r\n            </div>\r\n        );\r\n    } else {\r\n        const finish = new Date(finishDate).toLocaleString()\r\n        return (\r\n            <div>\r\n                <p>\r\n                    <strong>{text}</strong> do - <span><em>(zrobić do {date})</em> </span>\r\n                    <br />\r\n                    - potwierdzenie wykonania <span>{finish}</span>\r\n\r\n                    <button onClick={() => props.delete(id)}>X </button>\r\n                </p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Task;","import React from 'react';\r\nimport Task from './Task'\r\n\r\nconst TaskList = (props) => {\r\n    const active = props.tasks.filter(task => task.active === true)\r\n    const done = props.tasks.filter(task => task.active === false)\r\n\r\n    done.sort((a, b) => { // porownuje dwa elementy i musi zwrocic albo 0 albo >0 albo <0 \r\n        return b.finishDate - a.finishDate //zwraca nam po dacie w ms. np 153.. - 142..\r\n    })\r\n\r\n\r\n    active.sort((a, b) => {\r\n        a = a.text.toLowerCase()\r\n        b = b.text.toLowerCase()\r\n        if (a < b) return -1\r\n        if (a > b) return 1\r\n        else return 0\r\n    })\r\n\r\n    const activeTasks = active.map(task => (\r\n        <Task\r\n            key={task.id}\r\n            task={task}\r\n            delete={props.delete}\r\n            change={props.change}\r\n        />\r\n    ))\r\n    const doneTasks = done.map(task => (\r\n        <Task\r\n            key={task.id}\r\n            task={task}\r\n            delete={props.delete}\r\n            change={props.change}\r\n        />\r\n    ))\r\n    return (\r\n        <>\r\n            <div className=\"active\">\r\n                <h2>Zadania do zrobienia : ({activeTasks.length})</h2>\r\n                {activeTasks.length > 0 ? activeTasks : <h2>Nie masz nic do roboty</h2>}\r\n            </div>\r\n\r\n            <hr />\r\n\r\n            <div className=\"done\">\r\n                <h3>Zadania zrobione : ({doneTasks.length})</h3>\r\n                {done.length > 5 && <span style={{ fontSize: 10 }}>Wyświetlonych jest tylko 5 elementów</span>}\r\n                {doneTasks.slice(0, 5)}\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default TaskList;","import React, { Component } from 'react';\n\nimport './App.css';\nimport './AddTask'\nimport AddTask from './AddTask';\nimport TaskList from './TaskList'\n\n\n\n\n\nclass App extends Component {\n\n  counter = 4\n  state = {\n    tasks: [\n      {\n        id: 0,\n        text: \"posprzątać mieszkanie\",\n        date: '2020-05-15',\n        important: false,\n        active: true,\n        finishDate: null\n      },\n      {\n        id: 1,\n        text: \"wyprowadzić psa\",\n        date: '2020-04-20',\n        important: true,\n        active: true,\n        finishDate: null\n      },\n      {\n        id: 2,\n        text: \"zrobić zakupy\",\n        date: '2020-03-18',\n        important: true,\n        active: true,\n        finishDate: null\n      },\n      {\n        id: 3,\n        text: \"poleżec przed telewizorem\",\n        date: '2020-06-03',\n        important: true,\n        active: true,\n        finishDate: null\n      },\n    ]\n  }\n\n  deleteTask = (id) => {\n    // z uzyciem findIndex\n    // const tasks = [...this.state.tasks]\n    // const index = tasks.findIndex(task => task.id === id)\n    // tasks.splice(index, 1);\n\n    // this.setState({\n    //   tasks: tasks\n    // })\n\n    //z uzyciem filter\n    let tasks = [...this.state.tasks]\n    tasks = tasks.filter(task => task.id !== id)\n    this.setState({\n      tasks: tasks\n    })\n\n\n  }\n  changeTaskStatus = (id) => {\n    const tasks = [...this.state.tasks]\n    tasks.forEach(task => {\n      if (task.id === id) {\n        task.active = false\n        task.finishDate = new Date().getTime()\n      }\n\n    })\n    this.setState({\n      tasks: tasks\n    })\n  }\n\n  addTask = (text, date, important) => {\n\n    const task = {\n      id: this.counter,\n      text: text,//tekst z inputa\n      date: date,//tekst z inputa\n      important: important,//wartosc z inputa \n      active: true,\n      finishDate: null\n    }\n    this.counter++\n\n    this.setState(prevState => ({\n      tasks: [...prevState.tasks, task]\n    }))\n\n    return true\n  }\n\n  render() {\n\n    return (\n      <div className=\"app\">\n        <AddTask\n          add={this.addTask}\n        />\n        <TaskList\n          tasks={this.state.tasks}\n          delete={this.deleteTask}\n          change={this.changeTaskStatus}\n        />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}